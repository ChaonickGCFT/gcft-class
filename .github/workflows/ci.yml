name: GCFT build & verify

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  reproduce:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Init Git LFS (if used)
        run: |
          git lfs install
          git lfs pull || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Install Python dependencies (for verifier)
        run: pip install --upgrade pip && pip install numpy

      # ---- fix: always start with a clean CLASS dir ----
      - name: Remove any existing class_public dir
        run: rm -rf class_public

      - name: Fetch CLASS code
        run: git clone --depth 1 https://github.com/lesgourg/class_public.git class_public

      - name: Select INI
        id: ini
        run: |
          if [ -f gcft_zlimit_highz.ini ]; then
            echo "ini=gcft_zlimit_highz.ini" >> "$GITHUB_OUTPUT"
          elif [ -f gcft.ini ]; then
            echo "ini=gcft.ini" >> "$GITHUB_OUTPUT"
          else
            echo "No INI file found (gcft_zlimit_highz.ini or gcft.ini)"; exit 1
          fi
          echo "Using INI: $(cat $GITHUB_OUTPUT | sed -n 's/ini=//p')"

      - name: Copy GCFT files into CLASS dir
        run: |
          cp "${{ steps.ini.outputs.ini }}" class_public/
          [ -f gcft_class_background.dat ] && cp gcft_class_background.dat class_public/ || true

      - name: Build CLASS
        working-directory: class_public
        run: make -j"$(nproc)"

      - name: Run CLASS
        working-directory: class_public
        run: ./class "${{ steps.ini.outputs.ini }}"

      - name: Stage outputs
        run: |
          mkdir -p "$GITHUB_WORKSPACE/output"
          cp class_public/output/*_background.dat \
             class_public/output/*_thermodynamics.dat \
             class_public/output/*_cl.dat \
             class_public/output/*_pk.dat \
             "$GITHUB_WORKSPACE/output/" || true
          ls -lh "$GITHUB_WORKSPACE/output" || true

      - name: Write verify script
        run: |
          cat > verify.py <<'PY'
          import sys, re, numpy as np, pathlib as P
          pairs = [
            ("output/gcft00_pk.dat","gcft00_pk.dat"),
            ("output/gcft00_cl.dat","gcft00_cl.dat"),
            ("output/gcft00_background.dat","gcft00_background.dat"),
            ("output/gcft00_thermodynamics.dat","gcft00_thermodynamics.dat"),
          ]
          num = re.compile(r'^[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?$')
          def load(path):
              rows=[]
              for ln in open(path,'r',errors='ignore'):
                  s=ln.strip()
                  if not s or s.startswith('#'): continue
                  toks=[t for t in re.split(r'\s+', s) if num.match(t)]
                  if not toks: continue
                  rows.append([float(t) for t in toks])
              return np.array(rows,float)
          def max_rel(a,b):
              return float(np.nanmax(np.abs(a-b)/np.maximum(np.abs(b),1e-12)))
          ok=True; tol=5e-6
          for new, ref in pairs:
              pn, pr = P.Path(new), P.Path(ref)
              if not pn.exists():
                  print(f"[WARN] missing {new}"); ok=False; continue
              if not pr.exists():
                  print(f"[INFO] no baseline {ref}; presence OK"); continue
              A,B = load(pn), load(pr)
              if new.endswith("_pk.dat"):
                  kB, PB = B[:,0], B[:,1]
                  kA, PA = A[:,0], A[:,1]
                  kmin, kmax = max(kA.min(), kB.min()), min(kA.max(), kB.max())
                  m = (kB>=kmin) & (kB<=kmax)
                  if not np.any(m):
                      print(f"[FAIL] no overlapping k-range for {new}"); ok=False; continue
                  PAi = np.interp(kB[m], kA, PA)
                  diff = max_rel(PAi, PB[m])
              else:
                  if A.shape != B.shape:
                      print(f"[FAIL] shape {A.shape}!={B.shape} for {new}"); ok=False; continue
                  diff = max_rel(A,B)
              print(f"[{'OK' if diff<=tol else 'FAIL'}] {new} diff={diff:.3e}")
              if diff>tol: ok=False
          sys.exit(0 if ok else 1)
          PY

      - name: Verify outputs vs baselines
        run: python verify.py

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gcft-outputs
          path: output/gcft00_*.dat
