name: GCFT build & verify
on: [push, pull_request, workflow_dispatch]

jobs:
  reproduce:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: System deps
        run: sudo apt update && sudo apt install -y build-essential gfortran

      - name: Python deps
        if: hashFiles('requirements.txt') != ''
        run: pip install -r requirements.txt

      - name: Fetch CLASS
        run: git clone --depth 1 https://github.com/lesgourg/class_public.git class_public

      - name: Copy GCFT files into CLASS dir
        run: |
          cp gcft.ini gcft_class_background.dat class_public/
          # keep outputs in repo root for easy diff
          mkdir -p output

      - name: Build & run CLASS
        working-directory: class_public
        run: |
          make -j
          ./class gcft.ini
          cp output/gcft00_*.dat "$GITHUB_WORKSPACE/output/"

      - name: Verify outputs vs baselines
        run: |
          python - <<'PY'
          import sys, re, numpy as np, pathlib as P
          pairs=[("output/gcft00_pk.dat","GCFT00_pk.dat"),
                 ("output/gcft00_cl.dat","gcft00_cl.dat"),
                 ("output/gcft00_background.dat","gcft00_background.dat"),
                 ("output/gcft00_thermodynamics.dat","gcft00_thermodynamics.dat")]
          def load(p):
            rows=[]
            for ln in open(p,'r',errors='ignore'):
              if ln.lstrip().startswith('#') or not ln.strip(): continue
              rows.append([float(x) for x in re.split(r'\s+', ln.strip())])
            return np.array(rows,float)
          ok=True; tol=1e-6
          for new,ref in pairs:
            pn,pr=P.Path(new),P.Path(ref)
            if not pn.exists(): print(f"[FAIL] missing {new}"); ok=False; continue
            if not pr.exists(): print(f"[WARN] no baseline {ref}"); continue
            A,B=load(pn),load(pr)
            if A.shape!=B.shape: print(f"[FAIL] shape {A.shape}!={B.shape} for {new}"); ok=False; continue
            rel=np.abs(A-B)/np.maximum(np.abs(B),1e-12)
            m=float(np.nanmax(rel))
            print(f"[{'OK' if m<=tol else 'FAIL'}] {new} max rel diff={m:.3e}")
            if m>tol: ok=False
          sys.exit(0 if ok else 1)
          PY

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gcft-outputs
          path: output/gcft00_*.dat

          name: gcft-outputs
          path: output/gcft00_*.dat
