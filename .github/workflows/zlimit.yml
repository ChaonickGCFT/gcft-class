name: GCFT z-limit (low-z only)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  reproduce:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 🧱 Init Git LFS (for any .dat tracked via LFS)
        run: |
          git lfs install
          git lfs pull || true

      - name: 🧬 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 🧰 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev

      - name: 📦 Install Python dependencies
        if: hashFiles('requirements.txt') != ''
        run: pip install -r requirements.txt

      - name: 🧲 Fetch CLASS code
        run: |
          if [ -d "class_public" ]; then
            echo "🧹 class_public exists — removing it"
            rm -rf class_public
          fi
          git clone --depth 1 https://github.com/lesgourg/class_public.git class_public

      - name: 📎 Copy GCFT files into CLASS dir
        run: |
          cp gcft_zlimit_lowz.ini gcft_class_background.dat class_public/
          mkdir -p output

      - name: 🔨 Build & run CLASS
        working-directory: class_public
        run: |
          make -j"$(nproc)"
          ./class gcft_zlimit_lowz.ini
          mkdir -p "$GITHUB_WORKSPACE/output"
          cp output/*_background.dat output/*_thermodynamics.dat output/*_cl.dat output/*_pk.dat "$GITHUB_WORKSPACE/output/" || true

      - name: 📂 List output files
        run: ls -lh output || true

      - name: ✍️ Write verify script
        run: |
          cat > verify.py <<'PY'
          import sys, re, numpy as np, pathlib as P
          pairs = [
            ("output/gcft00_pk.dat","gcft00_pk.dat"),
            ("output/gcft00_cl.dat","gcft00_cl.dat"),
            ("output/gcft00_background.dat","gcft00_background.dat"),
            ("output/gcft00_thermodynamics.dat","gcft00_thermodynamics.dat"),
          ]
          num = re.compile(r'^[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?$')
          def load(path):
              rows=[]
              for ln in open(path,'r',errors='ignore'):
                  s=ln.strip()
                  if not s or s.startswith('#'): continue
                  toks=[t for t in re.split(r'\s+', s) if num.match(t)]
                  if not toks: continue
                  rows.append([float(t) for t in toks])
              return np.array(rows,float)
          def max_rel(a,b):
              return float(np.nanmax(np.abs(a-b)/np.maximum(np.abs(b),1e-12)))
          ok=True
          tol = 5e-6
          for new, ref in pairs:
              pn, pr = P.Path(new), P.Path(ref)
              if not pn.exists():
                  print(f"[FAIL] missing {new}"); ok=False; continue
              if not pr.exists():
                  print(f"[WARN] no baseline {ref} (skipping)"); continue
              A, B = load(pn), load(pr)
              if A.shape != B.shape:
                  print(f"[FAIL] shape {A.shape}!={B.shape} for {new}"); ok=False
              else:
                  diff = max_rel(A, B)
                  print(f"[{'OK' if diff<=tol else 'FAIL'}] {new} max rel diff={diff:.3e}")
                  if diff>tol: ok=False
          sys.exit(0 if ok else 1)
          PY

      - name: ✅ Verify outputs vs baselines
        run: python verify.py

      - name: 📤 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gcft-outputs
          path: output/gcft00_*.dat
