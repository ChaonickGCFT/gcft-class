name: GCFT Redshift Scan Workflow

on:
  workflow_dispatch:  # Allows manual triggering of the workflow from GitHub UI
  push:
    paths:
      - gcft_redshift_lim.ini
      - verify_z.py
      - .github/workflows/gcft_redshift.yml

jobs:
  run-redshift-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Increased timeout for experimenting
    env:
      OMP_NUM_THREADS: 1

    steps:
      # Checkout the repository
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # Setup Python (necessary if you're running Python scripts)
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Install dependencies like numpy for the verification script
      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy
          pip install scipy

      # Install system dependencies like build tools and gfortran
      - name: üõ†Ô∏è Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev

      # Fetch and compile the CLASS code
      - name: üîÑ Fetch CLASS code
        run: git clone --depth 1 https://github.com/lesgourg/class_public.git class_public

      # Compile CLASS
      - name: üîß Build CLASS
        working-directory: class_public
        run: |
          make -j"$(nproc)"
        continue-on-error: true  # Continue if the build fails to isolate issues

      # Check if CLASS compiled successfully
      - name: ‚ö° Check if CLASS compiled
        run: |
          if [ ! -f class_public/class ]; then
            echo "Error: CLASS was not compiled successfully."
            exit 1
          fi

      # Run the high-z redshift scan (Phase A)
      - name: üöÄ Run Phase A: High-z mPk
        working-directory: class_public
        run: |
          cp "$GITHUB_WORKSPACE/gcft_class_background.dat" .
          cp "$GITHUB_WORKSPACE/gcft_zlimit_highz.ini" .
          ./class gcft_zlimit_highz.ini || { echo "Error running CLASS on high-z."; exit 1; }
          mkdir -p "$GITHUB_WORKSPACE/output/highz"
          cp -v output/* "$GITHUB_WORKSPACE/output/highz/"

      # Run the CMB (low-z) scan (Phase B)
      - name: üöÄ Run Phase B: CMB + mPk for z ‚â§ 1000
        working-directory: class_public
        run: |
          cp "$GITHUB_WORKSPACE/gcft_zlimit_cmb.ini" .
          ./class gcft_zlimit_cmb.ini || { echo "Error running CLASS on CMB."; exit 1; }
          mkdir -p "$GITHUB_WORKSPACE/output/cmb"
          cp -v output/* "$GITHUB_WORKSPACE/output/cmb/"

      # List the output files for verification
      - name: üìÇ List output files
        run: |
          echo "Listing output files in $GITHUB_WORKSPACE/output..."
          ls -Rlh $GITHUB_WORKSPACE/output || true

      # Verify the outputs using verify_z.py (only if the outputs exist)
      - name: üß™ Verify outputs (if files exist)
        run: |
          if [ -d "$GITHUB_WORKSPACE/output" ] && [ "$(ls -A $GITHUB_WORKSPACE/output)" ]; then
            python verify_z.py || { echo "Verification failed."; exit 1; }
          else
            echo "No output files found, skipping verification."
          fi

      # Upload the output files to GitHub
      - name: üì§ Upload results
        if: always()  # Ensure the upload happens even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: gcft-redshift-output
          path: $GITHUB_WORKSPACE/output/
